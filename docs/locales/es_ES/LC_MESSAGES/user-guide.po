# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Diego Losada <dlosada@ethereumonarm.com>, Fernando
# Collado <fernando@ethereumonarm.com>
# This file is distributed under the same license as the Ethereum on ARM
# documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ethereum on ARM documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-22 18:53+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: es_ES\n"
"Language-Team: es_ES <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../user-guide/about-user-guide.rst:5
msgid "About user guide"
msgstr ""

#: ../../user-guide/about-user-guide.rst:7
msgid ""
"This User Guide explains in detail how to run an Ethereum node **post-"
"merge** (both Execution Layer and Consensus Layer clients) and to manage "
"them through Systemd services. You will find here:"
msgstr ""

#: ../../user-guide/about-user-guide.rst:10
msgid "How to manage the Ethereum client Systemd services and other common tasks"
msgstr ""

#: ../../user-guide/about-user-guide.rst:11
msgid "What is an Ethereum node and what types nodes are there"
msgstr ""

#: ../../user-guide/about-user-guide.rst:12
msgid ""
"Detailed info about the Execution Layer clients (formerly known as "
"Ethereum 1.0 clients) and how to run them"
msgstr ""

#: ../../user-guide/about-user-guide.rst:13
msgid ""
"Detailed info about the Consensus Layer clients (formerly known as "
"Ethereum 2.0 clients) and how to run them"
msgstr ""

#: ../../user-guide/about-user-guide.rst:14
msgid "Detailed info about how to set up a Validator (Staking)"
msgstr ""

#: ../../user-guide/about-user-guide.rst:15
msgid "How to run an Ethereum L2 node"
msgstr ""

#: ../../user-guide/about-user-guide.rst:16
msgid "How to run and configure Web 3 clients"
msgstr ""

#: ../../user-guide/about-user-guide.rst:20
msgid ""
"You need to run along both clients (Execution client+Consensus client) at"
" the same time. You can choose any EL+CL combination (we recommend to run"
" minority clients) but once started you need to keep them running one by "
"one (for instance: Geth+Lighthouse)"
msgstr ""

#: ../../user-guide/about-user-guide.rst:24
msgid "More info about **The Merge**"
msgstr ""

#: ../../user-guide/about-user-guide.rst:26
msgid "`launchpad.ethereum.org/en/merge-readiness`_"
msgstr ""

#: ../../user-guide/managing-clients.rst:5
msgid "Managing Clients"
msgstr ""

#: ../../user-guide/managing-clients.rst:1
#: ../../user-guide/managing-clients.rst:8
#: ../../user-guide/running-l1-clients.rst:1
msgid "Systemd Services"
msgstr ""

#: ../../user-guide/managing-clients.rst:10
msgid ""
"All clients use :guilabel:`Systemd` services for running. "
":guilabel:`Systemd` takes care of the processes and automatically "
"restarts them in case something goes wrong. It can enable a service to "
"automatically start it on boot as well."
msgstr ""

#: ../../user-guide/managing-clients.rst:14
msgid ""
":guilabel:`Systemd` command ``systemctl`` manages all operations related "
"to the services. The available options are as follows:"
msgstr ""

#: ../../user-guide/managing-clients.rst:17
msgid "**Enable**: Activate the service to start on boot"
msgstr ""

#: ../../user-guide/managing-clients.rst:18
msgid "**Disable**: Remove the service from boot start"
msgstr ""

#: ../../user-guide/managing-clients.rst:19
msgid "**Start**: Start the client process"
msgstr ""

#: ../../user-guide/managing-clients.rst:20
msgid "**Stop**: Stop the client process"
msgstr ""

#: ../../user-guide/managing-clients.rst:21
msgid "**Restart**: Restart the clients process"
msgstr ""

#: ../../user-guide/managing-clients.rst:23
msgid "The general syntax is:"
msgstr ""

#: ../../user-guide/managing-clients.rst:30
msgid ""
"You need the ``sudo`` command as root permissions are necessary. Type "
"your etherereum user password."
msgstr ""

#: ../../user-guide/managing-clients.rst:33
msgid ""
"For instance, to enable :guilabel:`Nethermind` client on boot and start "
"it, type:"
msgstr ""

#: ../../user-guide/managing-clients.rst:40
msgid ""
":guilabel:`Nethermind` will now start in the background and run "
"automatically on next boot."
msgstr ""

#: ../../user-guide/managing-clients.rst:43
msgid "These are the list of services available for all clients:"
msgstr ""

#: ../../user-guide/managing-clients.rst:45
msgid "Execution layer Systemd Services"
msgstr ""

#: ../../user-guide/managing-clients.rst:1
#: ../../user-guide/running-l1-clients.rst:1
msgid "Client"
msgstr ""

#: ../../user-guide/managing-clients.rst:1
#: ../../user-guide/running-l1-clients.rst:1
msgid "Systemd Service"
msgstr ""

#: ../../user-guide/managing-clients.rst:1
#: ../../user-guide/running-l1-clients.rst:1
msgid "`Geth`"
msgstr ""

#: ../../user-guide/managing-clients.rst:1
#: ../../user-guide/running-l1-clients.rst:1
msgid "`geth`"
msgstr ""

#: ../../user-guide/managing-clients.rst:1
#: ../../user-guide/running-l1-clients.rst:1
msgid "`Nethermind`"
msgstr ""

#: ../../user-guide/managing-clients.rst:1
#: ../../user-guide/running-l1-clients.rst:1
msgid "`nethermind`"
msgstr ""

#: ../../user-guide/managing-clients.rst:1
#: ../../user-guide/running-l1-clients.rst:1
msgid "`Erigon`"
msgstr ""

#: ../../user-guide/managing-clients.rst:1
#: ../../user-guide/running-l1-clients.rst:1
msgid "`erigon`"
msgstr ""

#: ../../user-guide/managing-clients.rst:1
msgid "`Reth`"
msgstr ""

#: ../../user-guide/managing-clients.rst:1
msgid "`reth`"
msgstr ""

#: ../../user-guide/managing-clients.rst:1
#: ../../user-guide/running-l1-clients.rst:1
msgid "`Hyperledger Besu`"
msgstr ""

#: ../../user-guide/managing-clients.rst:1
#: ../../user-guide/running-l1-clients.rst:1
msgid "`besu`"
msgstr ""

#: ../../user-guide/managing-clients.rst:54
msgid "Consensus Layer Systemd Services"
msgstr ""

#: ../../user-guide/managing-clients.rst:1
#: ../../user-guide/running-l1-clients.rst:1
msgid "`Lighthouse`"
msgstr ""

#: ../../user-guide/managing-clients.rst:1
msgid "`lighthouse-beacon` `lighthouse-validator`"
msgstr ""

#: ../../user-guide/managing-clients.rst:1
msgid "`prysm`"
msgstr ""

#: ../../user-guide/managing-clients.rst:1
msgid "`prysm-beacon` `prysm-validator`"
msgstr ""

#: ../../user-guide/managing-clients.rst:1
#: ../../user-guide/running-l1-clients.rst:1
msgid "`Nimbus`"
msgstr ""

#: ../../user-guide/managing-clients.rst:1
#: ../../user-guide/running-l1-clients.rst:1
msgid "`nimbus`"
msgstr ""

#: ../../user-guide/managing-clients.rst:1
#: ../../user-guide/running-l1-clients.rst:1
msgid "`Teku`"
msgstr ""

#: ../../user-guide/managing-clients.rst:1
#: ../../user-guide/running-l1-clients.rst:1
msgid "`teku`"
msgstr ""

#: ../../user-guide/managing-clients.rst:64
msgid "Changing Parameters"
msgstr ""

#: ../../user-guide/managing-clients.rst:66
msgid ""
":guilabel:`Systemd` services read client variables from ``/etc/ethereum``"
" directory files. If you want to change any client parameter you have to "
"edit the correspondent config file. For instance, this is the "
"``/etc/ethereum/geth.conf`` content::"
msgstr ""

#: ../../user-guide/managing-clients.rst:72
msgid "Edit the file by running a text editor (``vim``, ``nano``):"
msgstr ""

#: ../../user-guide/managing-clients.rst:78
msgid ""
"For instance, let's change the P2P port to 30304. Add it to the ARGS line"
" and save it::"
msgstr ""

#: ../../user-guide/managing-clients.rst:82
msgid "For changes to take effect, you need to restart the client:"
msgstr ""

#: ../../user-guide/managing-clients.rst:90
msgid ""
"All clients have its own config files in ``/etc/ethereum`` except "
":guilabel:`Nethermind` that has an additional conf directory located in "
"``/opt/nethermind/configs/``"
msgstr ""

#: ../../user-guide/managing-clients.rst:94
msgid ""
"Read the clients official documentation in order to learn the specific "
"parameters of each client."
msgstr ""

#: ../../user-guide/managing-clients.rst:99
msgid "Updating Clients"
msgstr ""

#: ../../user-guide/managing-clients.rst:102
msgid "APT repository"
msgstr ""

#: ../../user-guide/managing-clients.rst:106
msgid "If you see this warning running APT:"
msgstr ""

#: ../../user-guide/managing-clients.rst:108
msgid ""
"``Key is stored in legacy trusted.gpg keyring (/etc/apt/trusted.gpg), see"
" the DEPRECATION section in apt-key(8) for details``"
msgstr ""

#: ../../user-guide/managing-clients.rst:110
msgid "run the following command:"
msgstr ""

#: ../../user-guide/managing-clients.rst:118
msgid ""
"**Ethereum on ARM** comes with a custom ``APT`` repository which allows "
"users to easily update the Ethereum software. For instance, to update the"
" :guilabel:`Geth` client run:"
msgstr ""

#: ../../user-guide/managing-clients.rst:126
msgid "If you want to run the new version, restart the service by running:"
msgstr ""

#: ../../user-guide/managing-clients.rst:132
msgid ""
"**You can downgrade a client as well** by setting a specific version. "
"This is particularly useful if a bug is found in the current version and "
"you need to keep running the client. For example:"
msgstr ""

#: ../../user-guide/managing-clients.rst:139
msgid "The APT repository is browsable so you can download a package manually:"
msgstr ""

#: ../../user-guide/managing-clients.rst:141
msgid "`https://apt.ethereumonarm.com/pool/main`_"
msgstr ""

#: ../../user-guide/managing-clients.rst:146
msgid "Available Packages"
msgstr ""

#: ../../user-guide/managing-clients.rst:148
msgid "These are the available packages:"
msgstr ""

#: ../../user-guide/managing-clients.rst:150
msgid "**L1 clients**"
msgstr ""

#: ../../user-guide/managing-clients.rst:152
msgid "*Execution Layer clients*"
msgstr ""

#: ../../user-guide/managing-clients.rst:154
msgid "geth"
msgstr ""

#: ../../user-guide/managing-clients.rst:155
msgid "nethermind"
msgstr ""

#: ../../user-guide/managing-clients.rst:156
msgid "erigon"
msgstr ""

#: ../../user-guide/managing-clients.rst:157
msgid "besu"
msgstr ""

#: ../../user-guide/managing-clients.rst:158
msgid "reth"
msgstr ""

#: ../../user-guide/managing-clients.rst:160
msgid "*Consensus Layer clients*"
msgstr ""

#: ../../user-guide/managing-clients.rst:162
msgid "lighthouse"
msgstr ""

#: ../../user-guide/managing-clients.rst:163
msgid "prysm"
msgstr ""

#: ../../user-guide/managing-clients.rst:164
msgid "teku"
msgstr ""

#: ../../user-guide/managing-clients.rst:165
msgid "nimbus"
msgstr ""

#: ../../user-guide/managing-clients.rst:167
msgid "**L2 clients**"
msgstr ""

#: ../../user-guide/managing-clients.rst:169
msgid "*Polygon*"
msgstr ""

#: ../../user-guide/managing-clients.rst:171
msgid "polygon-heimdall"
msgstr ""

#: ../../user-guide/managing-clients.rst:172
msgid "polygon-bor"
msgstr ""

#: ../../user-guide/managing-clients.rst:174
msgid "*Optimism*"
msgstr ""

#: ../../user-guide/managing-clients.rst:176
msgid "optimism-l2geth"
msgstr ""

#: ../../user-guide/managing-clients.rst:177
msgid "optimism-op-geth"
msgstr ""

#: ../../user-guide/managing-clients.rst:178
msgid "optimism-op-node"
msgstr ""

#: ../../user-guide/managing-clients.rst:180
msgid "*Arbitrum*"
msgstr ""

#: ../../user-guide/managing-clients.rst:182
msgid "arbitrum-nitro"
msgstr ""

#: ../../user-guide/managing-clients.rst:184
msgid "*Starknet*"
msgstr ""

#: ../../user-guide/managing-clients.rst:186
msgid "papyrus"
msgstr ""

#: ../../user-guide/managing-clients.rst:187
msgid "juno"
msgstr ""

#: ../../user-guide/managing-clients.rst:189
msgid "**Web 3**"
msgstr ""

#: ../../user-guide/managing-clients.rst:191
msgid "bee"
msgstr ""

#: ../../user-guide/managing-clients.rst:192
msgid "kubo"
msgstr ""

#: ../../user-guide/managing-clients.rst:193
msgid "status"
msgstr ""

#: ../../user-guide/managing-clients.rst:195
msgid "**Infra**"
msgstr ""

#: ../../user-guide/managing-clients.rst:197
msgid "staking-deposit-cli"
msgstr ""

#: ../../user-guide/managing-clients.rst:198
msgid "mev-boost"
msgstr ""

#: ../../user-guide/managing-clients.rst:201
msgid ""
"The `APT` command will install the last version available in the "
"repository. Most clients provide binaries for ARM64 architecture so this "
"is just a package to handle the software."
msgstr ""

#: ../../user-guide/managing-clients.rst:204
msgid "See our developer guide section if you want to build you own packages."
msgstr ""

#: ../../user-guide/managing-clients.rst:207
msgid "Getting Logs"
msgstr ""

#: ../../user-guide/managing-clients.rst:209
msgid ""
"You can get clients info by using :guilabel:`Systemd` ``journalctl`` "
"command. For instance, to get the :guilabel:`Geth` ``output``, run:"
msgstr ""

#: ../../user-guide/managing-clients.rst:216
msgid "You can of course take a look at ``/var/log/syslog``:"
msgstr ""

#: ../../user-guide/managing-clients.rst:223
msgid "Monitoring Dashboards"
msgstr ""

#: ../../user-guide/managing-clients.rst:225
msgid ""
"We configured Grafana Dashboards to let users monitor both Execution and "
"Consensus clients. To access the dashboards just open your browser and "
"type your ``Raspberry_IP`` followed by the 3000 port::"
msgstr ""

#: ../../user-guide/mev-boost.rst:5
msgid "MEV boost"
msgstr ""

#: ../../user-guide/mev-boost.rst:7
msgid ""
"MEV stands for Maximal Extractable Value and, basically, it's a way of "
"maximizing your validator profits by proposing a block that was built by "
"a 3rd party. This block includes more rewards than the standard block "
"created locally by your validator."
msgstr ""

#: ../../user-guide/mev-boost.rst:11
msgid ""
"there has been a lot of controversy about MEV as some relays comply with "
"OFAC sanctions which means that some transactions are in the end censored"
" by this relays."
msgstr ""

#: ../../user-guide/mev-boost.rst:14
msgid ""
"We are including in our default config file ``/etc/ethereum/mev-"
"boost.conf`` **NO censorship** relays only."
msgstr ""

#: ../../user-guide/mev-boost.rst:16
msgid "As a point of reference, we use the `EthStaker relay list`_"
msgstr ""

#: ../../user-guide/mev-boost.rst:21
msgid "Using MEV"
msgstr ""

#: ../../user-guide/mev-boost.rst:23
msgid ""
"First step is to start the ``mev-boost`` service. If you have an old "
"Ethereum image you may need to install the package:"
msgstr ""

#: ../../user-guide/mev-boost.rst:30
msgid ""
"You can run the service on your node or on another ARM board. If you have"
" a Raspberry Pi or an Odroid it may be more convenient to run it outside "
"your node."
msgstr ""

#: ../../user-guide/mev-boost.rst:33
msgid "To start the service, type:"
msgstr ""

#: ../../user-guide/mev-boost.rst:39
msgid "You need to configure your **Consensus Layer** clients to use MEV."
msgstr ""

#: ../../user-guide/mev-boost.rst:42
msgid "Configuring CL clients"
msgstr ""

#: ../../user-guide/mev-boost.rst:44
msgid "Edit the CL config files and add the data described below."
msgstr ""

#: ../../user-guide/mev-boost.rst:47
msgid ""
"You need to change the Mev Boost address depending on where you are "
"running the service (on the same node or on an external node). Choose "
"``localhost`` if you are running the service along with your validator or"
" **the external node** ``IP`` (such as 192.168.0.20) if you are using an "
"external device."
msgstr ""

#: ../../user-guide/mev-boost.rst:51
msgid "**We will be using** ``localhost`` **in the examples.**"
msgstr ""

#: ../../user-guide/mev-boost.rst:54 ../../user-guide/running-l1-clients.rst:83
msgid "Lighthouse"
msgstr ""

#: ../../user-guide/mev-boost.rst:56 ../../user-guide/mev-boost.rst:87
#: ../../user-guide/mev-boost.rst:106
msgid "Edit the Beacon config file:"
msgstr ""

#: ../../user-guide/mev-boost.rst:62
msgid "Add the flag ``--builder http://localhost:18550`` at the end of the file."
msgstr ""

#: ../../user-guide/mev-boost.rst:64 ../../user-guide/mev-boost.rst:95
#: ../../user-guide/mev-boost.rst:114
msgid "Edit the Validator config file:"
msgstr ""

#: ../../user-guide/mev-boost.rst:70
msgid "Add the flag ``--builder-proposals``at the end of the file."
msgstr ""

#: ../../user-guide/mev-boost.rst:73
#: ../../user-guide/running-l1-clients.rst:139
msgid "Teku"
msgstr ""

#: ../../user-guide/mev-boost.rst:75
msgid "Edit the Teku config file:"
msgstr ""

#: ../../user-guide/mev-boost.rst:81
msgid ""
"Add the flags ``--validators-builder-registration-default-enabled=true "
"--builder-endpoint=http://localhost:18550`` at the end of the file."
msgstr ""

#: ../../user-guide/mev-boost.rst:85
#: ../../user-guide/running-l1-clients.rst:111
msgid "Prysm"
msgstr ""

#: ../../user-guide/mev-boost.rst:93
msgid ""
"Add the flag ``--http-mev-relay=http://localhost:18550`` at the end of "
"the file."
msgstr ""

#: ../../user-guide/mev-boost.rst:101
msgid "Add the flag ``--enable-builder`` at the end of the file."
msgstr ""

#: ../../user-guide/mev-boost.rst:104
#: ../../user-guide/running-l1-clients.rst:170
msgid "Nimbus"
msgstr ""

#: ../../user-guide/mev-boost.rst:112
msgid ""
"Add the flags ``--payload-builder=true --payload-builder-"
"url=http://localhost:18550`` at the end of the file."
msgstr ""

#: ../../user-guide/mev-boost.rst:120
msgid "Add the flag ``--payload-builder=true`` at the end of the file."
msgstr ""

#: ../../user-guide/node-types.rst:5
msgid "Ethereum nodes"
msgstr ""

#: ../../user-guide/node-types.rst:7
msgid "There are 2 types of Ethereum nodes:"
msgstr ""

#: ../../user-guide/node-types.rst:9
msgid "Layer 1 nodes"
msgstr ""

#: ../../user-guide/node-types.rst:10
msgid "Layer 2 nodes"
msgstr ""

#: ../../user-guide/node-types.rst:12
msgid ""
"A **Layer 1** Ethereum node is responsible for validating and propagating"
" transactions and blocks across the main network. Layer 1 nodes play a "
"key role in maintaining the security and decentralization of the Ethereum"
" network."
msgstr ""

#: ../../user-guide/node-types.rst:15
msgid ""
"**Layer 2** Ethereum nodes, or L2 nodes, refer to **off-chain scaling "
"solutions** built on top of the Ethereum blockchain to improve its "
"scalability, throughput, and transaction speed."
msgstr ""

#: ../../user-guide/node-types.rst:19
msgid "Layer 1 node"
msgstr ""

#: ../../user-guide/node-types.rst:21
msgid ""
"If you run an Ethereum L1 node **you are contributing to the health and "
"decentralization of the network.**"
msgstr ""

#: ../../user-guide/node-types.rst:24
msgid ""
"You can use your own node to **verify** all the Ethereum transactions (no"
" need to trust a third party), **send your own transactions** or query "
"the blockchain for further info."
msgstr ""

#: ../../user-guide/node-types.rst:27
msgid "There are three node setups that you can run with your ARM board:"
msgstr ""

#: ../../user-guide/node-types.rst:29
msgid "A **Full** Ethereum node (Execution Layer + Consensus Layer Beacon Chain)"
msgstr ""

#: ../../user-guide/node-types.rst:30
msgid ""
"An **Archive** Ethereum node (Execution Layer + Consensus Layer Beacon "
"Chain)"
msgstr ""

#: ../../user-guide/node-types.rst:31
msgid ""
"A **Staking** node (Full/Archive node + Consensus Layer Validator node + "
"32 ETH deposit)"
msgstr ""

#: ../../user-guide/node-types.rst:34
msgid "Full Ethereum node"
msgstr ""

#: ../../user-guide/node-types.rst:36 ../../user-guide/node-types.rst:57
msgid "Definitions from `ethereum.org`_"
msgstr ""

#: ../../user-guide/node-types.rst:38
msgid "Stores full blockchain data (although this is periodically pruned so"
msgstr ""

#: ../../user-guide/node-types.rst:39
msgid ""
"a full node does not store all state data back to genesis) * Participates"
" in block validation, verifies all blocks and states. * All states can be"
" derived from a full node (although very old states are reconstructed "
"from requests made to archive nodes). * Serves the network and provides "
"data on request."
msgstr ""

#: ../../user-guide/node-types.rst:45
msgid ""
"This is the default mode for all clients. **In order to run a Full node "
"you need an Execution Layer Client and a Consensus Layer Client** (just "
"the Beacon Node part)."
msgstr ""

#: ../../user-guide/node-types.rst:50
msgid ""
":guilabel:`Erigon` includes a light Consensus Client by default so if you"
" use this client and you are not going to stake **you can run a full node"
" just by starting the Erigon service.**"
msgstr ""

#: ../../user-guide/node-types.rst:55
msgid "Archive Ethereum node"
msgstr ""

#: ../../user-guide/node-types.rst:59
msgid ""
"Stores everything kept in the full node and builds an archive of "
"historical states."
msgstr ""

#: ../../user-guide/node-types.rst:60
msgid ""
"It is needed if you want to query something like an account balance at "
"block #4,000,000, or simply and reliably test your own transactions set "
"without mining them using tracing. * This data represents units of "
"terabytes, which makes archive nodes less attractive for average users "
"but can be handy for services like block explorers, wallet vendors, and "
"chain analytics."
msgstr ""

#: ../../user-guide/node-types.rst:65
msgid ""
"If you want to start an archive node you need to run :guilabel:`Erigon` "
"or  :guilabel:`Reth` client. Take into account that you will need a 4 TB "
"SSD disk and the sync time will take several days."
msgstr ""

#: ../../user-guide/node-types.rst:69
msgid "Staking node"
msgstr ""

#: ../../user-guide/node-types.rst:71
msgid ""
"If you want to **contribute to the Ethereum security** you can become a "
"Validator and stake your ETH. You can do so by depositing 32 ETH into the"
" mainnet staking contract and creating a pair of keys to run a Consensus "
"Layer Validator. The CL Validator will propose new blocks and make "
"attestations on blocks created by other validators."
msgstr ""

#: ../../user-guide/node-types.rst:76
msgid "You will need:"
msgstr ""

#: ../../user-guide/node-types.rst:78
msgid ""
"A synced Ethereum node (Execution Layer Client + Consensus Layer Beacon "
"Chain Client)"
msgstr ""

#: ../../user-guide/node-types.rst:79
msgid "A Consensus Layer Validator"
msgstr ""

#: ../../user-guide/node-types.rst:80
#: ../../user-guide/running-l1-clients.rst:367
msgid "32 ETH"
msgstr ""

#: ../../user-guide/node-types.rst:85
msgid "Layer 2 node"
msgstr ""

#: ../../user-guide/node-types.rst:87
msgid ""
"Layer 2 solutions include various technologies, such as **state channels,"
" sidechains and rollups** (like Optimistic Rollups and ZK-Rollups). These"
" solutions offload some of the computational load from the main Ethereum "
"blockchain, allowing for **faster and cheaper transactions**."
msgstr ""

#: ../../user-guide/node-types.rst:91
msgid ""
"Layer 2 nodes are responsible for maintaining the integrity and security "
"of the off-chain transactions and state changes. They ensure that these "
"transactions are valid and follow the rules of the Layer 2 protocol "
"before they are eventually committed back to the Ethereum Layer 1 "
"blockchain."
msgstr ""

#: ../../user-guide/node-types.rst:95
msgid "Ethereum on ARM supports the following L2 solutions:"
msgstr ""

#: ../../user-guide/node-types.rst:97 ../../user-guide/running-l2-clients.rst:6
msgid "Polygon_"
msgstr ""

#: ../../user-guide/node-types.rst:98 ../../user-guide/running-l2-clients.rst:7
msgid "Arbitrum_"
msgstr ""

#: ../../user-guide/node-types.rst:99 ../../user-guide/running-l2-clients.rst:8
msgid "Optimism_"
msgstr ""

#: ../../user-guide/node-types.rst:100
#: ../../user-guide/running-l2-clients.rst:9
msgid "Starknet_"
msgstr ""

#: ../../user-guide/node-types.rst:101
#: ../../user-guide/running-l2-clients.rst:10
msgid "Gnosis_"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:8
msgid "Running Layer 1 nodes"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:10
msgid ""
"In order to run an Ethereum node you will need to run 2 different clients"
" at the same time: **one Consensus Layer Client (Beacon Chain) and one "
"Execution Layer Client**."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:13
msgid "Very briefly, you have to:"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:15
msgid ""
"**Run and sync a Consensus Client (Beacon chain)** using Checkpoint sync "
"(it syncs in a few minutes)."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:16
msgid "**Wait** for the Beacon Chain to get in sync."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:17
msgid "**Run and sync an Execution Client**."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:20
msgid ""
":guilabel:`Erigon` is the only Execution Layer client that includes a "
"Light Consensus Layer Client. You can run a full Ethereum node just by "
"starting the Erigon service."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:23
msgid "See below for further details."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:26
msgid "Consensus Layer Nodes"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:28
msgid "The Consensus Layer node consists of two separate clients:"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:30
msgid "The Beacon Chain client"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:31
msgid "The Validator client"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:33
msgid ""
"As stated above, for running a full Ethereum node you will need to start "
"a Beacon Chain client and an Execution Layer client. The Beacon Chain is "
"the one telling the Execution Layer client how to follow the head of the "
"chain, so, without it, the Execution Client would be lost and it could "
"not start the sync."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:38
msgid ""
"**You need a synced Beacon Chain Client for the Execution Client sync to "
"start. As we configured Checkpoint"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:38
msgid ""
"Sync by default in all clients, the Beacon Chain should be in sync in a "
"few minutes.**"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:41
#: ../../user-guide/running-l1-clients.rst:339
msgid ""
"**REMEMBER: Staking is NOT necessary for running a full Ethereum node**. "
"For this, you just need a synced Execution Client running along with a "
"synced Consensus Layer Beacon Chain."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:45
msgid "Beacon Chain"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:47
msgid ""
"The Beacon Chain is a bridge between the Execution Layer and the "
"Consensus Layer clients. It connects the Validator to the Execution Layer"
" so the Validator can detect the 32 ETH deposit transaction (which "
"contains the Validator public key)."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:51
msgid ""
"The Beacon Chain also guides the Execution Client on how to follow the "
"chain head."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:53
msgid ""
"In order to propose (create) blocks in Ethereum you need an Execution "
"Client in sync running along with a Beacon Chain in sync and a Validator "
"(the Beacon chain and the Validator are both part of the Consensus Layer "
"Client)."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:58
msgid "Checkpoint Sync"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:60
msgid ""
"**All Consensus Layer clients are configured to use CheckPoint Sync by "
"default** that will get the Beacon Chain synced in just a few minutes."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:64
msgid "Supported Clients"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:66
msgid "Ethereum on ARM supports the main Consensus Layer clients available."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "Official Binary"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "Language"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "Home"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "`Yes`"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "`Rust`"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "lighthouse-book.sigmaprime.io_"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "`Prysm`"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "`Go`"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "docs.prylabs.network_"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "`Nim`"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "nimbus.team_"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "`Java`"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "consensys.net_"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:85
msgid ":guilabel:`Lighthouse` is a full CL client written in Rust."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "Home Directory"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "Config Files"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "Default TCP/UDP Port"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "`lighthouse-beacon lighthouse-validator`"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "`/home/ethereum/.lighthouse`"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid ""
"`/etc/ethereum/lighthouse-beacon.conf /etc/ethereum/lighthouse-"
"validator.conf`"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "`9000`"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:93
#: ../../user-guide/running-l1-clients.rst:120
#: ../../user-guide/running-l1-clients.rst:148
#: ../../user-guide/running-l1-clients.rst:189
msgid "1.- Port forwarding"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:95
msgid "You need to open the 9000 port in your router (both UDP and TCP)"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:97
#: ../../user-guide/running-l1-clients.rst:124
msgid "2.- Start the beacon chain"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:99
#: ../../user-guide/running-l1-clients.rst:126
msgid "Under the ethereum account, run:"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:105
msgid ""
"The Lighthouse client will start to sync the Beacon Chain. **This may "
"take just some minutes as Checkpoint sync is enabled by default.**"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:108
msgid ""
"The Lighthouse beacon chain is now started. Wait for it to get in sync. "
"Choose an Execution Layer client and start it."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:113
msgid ":guilabel:`Prysm` is a full Consensus Layer client written in Go."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "`prysm-beacon prysm-validator`"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "`/home/ethereum/.eth2`"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "`/etc/ethereum/prysm-beacon.conf /etc/ethereum/prysm-validator.conf`"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "`13000 12000`"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:122
msgid ""
"You need to open the 13000 (TCP) and 12000 (UDP) ports in your "
"router/firewall"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:132
msgid ""
"This will start to sync the Beacon Chain. **This may take just some "
"minutes as Checkpoint sync is enabled by default.**"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:136
msgid ""
"The Prysm beacon chain is now started. Wait for it to get in sync. Choose"
" an Execution Layer client and start it."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:141
msgid ":guilabel:`Teku` is a full Consensus Layer client written in Java."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "Config File"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "`/home/ethereum/.teku/data_teku`"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "`/etc/ethereum/teku.conf`"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:150
#: ../../user-guide/running-l1-clients.rst:191
msgid "You need to open the 9000 port (both UDP and TCP)"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:152
msgid "2.- Start the Beacon Chain and the Validator"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:154
msgid ""
"Copy and paste your Ethereum Address for receiving through the fee "
"recipient flag:"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:167
msgid ""
"The Teku beacon chain is now started. Wait for it to get in sync. Choose "
"an Execution Layer client and start it."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:174
msgid ""
"From version 23.1.0, we upgraded :guilabel:`Nimbus` to run as 2 "
"independent processes, 1 binary for the Beacon Chain and 1 binary for the"
" validator (so 2 different services)."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:177
msgid ""
"If you are using a prior release please upgrade and take into account "
"that you need to run 2 Systemd services."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:180
msgid "**You need to stop the nimbus service before upgrading to 23.1.0**"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:182
msgid ":guilabel:`Nimbus` is a full Consensus Layer client written in Nim."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "`/home/ethereum/.nimbus-beacon /home/ethereum/.nimbus-validator`"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "`/etc/ethereum/nimbus-beacon.conf /etc/ethereum/nimbus-validator.conf`"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:193
msgid ""
"2. Copy and paste your Ethereum Address for receiving tips and set the "
"fee recipient flag:"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:206
msgid "Enable Checkpoint Sync."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:208
msgid ""
"We need to run a command manually before the **Checkpoint Sync** gets "
"started:"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:214
msgid "Wait for the command to finish."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:216
msgid "Start the Nimbus Beacon Chain service:"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:222
msgid ""
"The Nimbus Beacon Chain is now started. Wait for it to get in sync. "
"Choose an Execution Layer client and start it."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:225
msgid "Execution Layer nodes"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:227
msgid ""
"The **Execution Clients**  are the clients responsible for executing "
"transactions and storing the blockchain global state among other "
"operations."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:231
msgid "Supported clients"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:233
msgid "Ethereum on ARM supports all available Execution Layer clients."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:235
msgid "Execution Layer Supported Clients"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "geth.ethereum.org_"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "`.NET`"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "nethermind.io_"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "`No (crosscompiled)`"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "`github.com/ledgerwatch/erigon`_"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "hyperledger.org_"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:250
msgid ""
"Remember that you need to run a synced Consensus Layer client before "
"starting the Execution Layer client (unless you use :guilabel:`Erigon` "
"and you are not going to stake)"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:254
msgid "Geth"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:256
msgid ""
":guilabel:`Geth` is the most used EL client. It is developed by the "
"Ethereum Foundation team and the performance on ARM64 devices is "
"outstanding. It is capable of syncing the whole blockchain in 2-3 days on"
" a **Raspberry Pi 4 with 8 GB RAM** and in less that 1 day on the **Radxa"
" Rock 5B**."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "`/home/ethereum/.geth`"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "`/etc/ethereum/geth.conf`"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "`30303`"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:266
msgid "You can start the client by running:"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:272
msgid "For further info of how the node is doing you can use Systemd journal:"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:279
msgid "Nethermind"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:281
msgid ""
":guilabel:`Nethermind` is a .NET enterprise-friendly full Execution Layer"
" client."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "`/home/ethereum/.nethermind`"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "`/opt/nethermind/configs/mainnet.json`"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:288
#: ../../user-guide/running-l1-clients.rst:302
#: ../../user-guide/running-l1-clients.rst:316
msgid "In order to start the client run:"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:295
msgid "Hyperledger Besu"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "`/home/ethereum/.besu`"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "`/etc/ethereum/besu.conf`"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:309
msgid "Erigon"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "`/home/ethereum/.erigon`"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:1
msgid "`/etc/ethereum/erigon.conf`"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:323
msgid ""
":guilabel:`Erigon` is the only client that includes a Light Consensus "
"Client. You can run a full Ethereum node just by starting the Erigon "
"service."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:327
msgid "Staking"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:331
msgid ""
"**DISCLAIMER**: Ethereum is an experimental technology. **Running the "
"Ethereum on ARM image as an a Consensus Layer validator node can lead you"
" to ETH loss**. This is a risky operation and you alone are responsible "
"for your actions using the Ethereum software included in this image or "
"following the instructions of this guide."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:336
msgid ""
"We strongly recommend to try first a Consensus Layer testnet and get "
"familiarized with the process before staking real ETH."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:342
msgid ""
"Ethereum staking is the process of participating in the proof-of-stake "
"(PoS) consensus mechanism of the Ethereum network by locking up 32 ETH in"
" the validator deposit contract. Staking serves as a way to secure the "
"network, validate transactions, and create new blocks on the Ethereum "
"blockchain, while also rewarding participants for their contributions."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:347
msgid ""
"In order to stake you need to set up a Validator Client that will propose"
" blocks and do attestations according to the Consensus Layer "
"specification (proposing a block would be the equivalent to \"mine\" a "
"block in the former Proof of Work Ethereum chain)."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:351
msgid ""
"The validator client is included in all Consensus Layer clients along "
"with the Beacon Chain clients."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:355
msgid ""
"There is a chance of losing your ETH if your validator does something "
"wrong (this is called being slashed), so be extremely carefull and always"
" follow the protocol specification."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:359
msgid ""
"And **never (EVER)** run the same validator keys in two different nodes "
"at the same time. **You will be slashed**."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:363
msgid "Staking Requirements"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:365
msgid "In order to stake and run a validator you will need:"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:368
msgid "A synced Ethereum Execution Layer client"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:369
msgid ""
"A synced Ethereum Consensus Layer client consisting of: A Beacon Chain "
"instance and a Validator instance (with one or more validator keys)"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:372
msgid ""
"Before making the 32 ETH deposit you need to create 2 key pairs and a "
"Json file with the necessary information to interact with the mainnet "
"staking contract through a transaction."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:375
msgid ""
"The Ethereum Foundation provides a tool (staking-deposit-cli) to create "
"the keys and the deposit information (which among others contains your "
"validator(s) public key(s)). This tool is already installed in your "
"Ethereum on ARM node. If you are running an older image please, run:"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:385
msgid ""
"Additionally, the Ethereum Foundation developed a web Launchpad to walk "
"you through the staking process. Here you can upload the Deposit Json "
"file and make the 32 ETH transaction with your wallet or a web3 wallet "
"(such as Metamask or Wallet Connect)."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:390
msgid "Validator setup"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:392
msgid "Remember that you need 32 ETH for each validator you want to run."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:394
msgid ""
"The validator setup is client agnostic so it will be valid for all "
"Consensus Layer clients."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:397
msgid ""
"At this point, you should have an Execution Layer + Consensus Layer "
"clients combo in sync (both clients running along one 1 on 1)."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:400
msgid "The first step is to visit the EF Launchpad website to start the process:"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:402
msgid "`https://launchpad.ethereum.org`_"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:406
msgid "Click **“Become a validator”**"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:408
msgid "Read carefully and accept all warnings."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:410
msgid ""
"You can skip the **Execution Client** selection as all clients are "
"already installed and configured. click \"Continue\""
msgstr ""

#: ../../user-guide/running-l1-clients.rst:413
msgid "Same for the **Consensus Clients**. Click \"Continue\""
msgstr ""

#: ../../user-guide/running-l1-clients.rst:415
msgid ""
"In the next screen, select the number of validators you want to run. "
"Remember that you need 32 ETH for each one."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:418
msgid ""
"6. Ethereum on ARM provides the Ethereum Foundation tool (staking-"
"deposit-cli) to generate the keys and set the withdrawal address (where "
"the staked ETH will be deposited periodically). so, **in your terminal** "
"and under the ethereum account, run (assuming 1 validator):"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:426
msgid ""
"7. You will see a warning about the withdrawal address. Please, **make "
"sure you have control over the address you are setting. Otherwise you "
"won't be able to withdrawn your ETH and the staked ETH.**"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:429
msgid ""
"Choose your mnemonic language and type a password for keeping your keys "
"safe."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:433
msgid ""
"Now, **Make sure you wrote down the nnemonic on a safe place**. Without "
"it you will NOT be able to withdrawn your ETH in the future."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:436
msgid "**Again, please, make sure your mnemonic is safe!!!**"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:438
msgid ""
"Write down your mnemonic password, press any key and type it again as "
"requested."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:440
msgid "Now you have 2 JSON files under the ``validator_keys`` directory:"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:442
msgid ""
"A deposit data file for making the 32 ETH transaction to the mainnet "
"(which contains your validator public key as well)."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:444
msgid ""
"A keystore file with your validator keys that will be used by your "
"Consensus Layer client."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:447
msgid ""
"9. Back to the Launchpad website, check **\"I am keeping my keys safe and"
" have written down my mnemonic phrase\"** and click **\"Continue\"**."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:452
msgid ""
"Again, **make sure you have both an Execution Layer client + a Consensus "
"Layer client synced, running along and properly configured**."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:455
msgid ""
"10. It is time to send the 32 ETH deposit to the Ethereum mainnet "
"contractg. You need the deposit file (located in your Board). You can, "
"either copy and paste the file content and save it as a new JSON file in "
"your desktop computer or copy the file from the Raspberry to your desktop"
" through SSH."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:462
msgid "Copy and Paste"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:464
msgid "Connected through SSH to your Raspberry Pi, type:"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:470
msgid ""
"Copy the content (the text in square brackets), go back to your desktop, "
"paste it into your favourite editor and save it as a json file."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:473
msgid "SCP (SSH remote copy)"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:475
msgid "Pull the file from your desktop through SSH, copy the file:"
msgstr ""

#: ../../user-guide/running-l1-clients.rst:481
msgid ""
"Replace the variables (``$YOUR_RASPBERRYPI_IP`` and ``$FILE_ID``) with "
"your data. This command will copy the file to your desktop computer "
"``/tmp`` directory."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:484
msgid ""
"11. Now, back to the Launchpad website, upload the ``deposit_data`` file "
"and select Metamask, click continue and check all warnings. Click "
"\"Continue\" and click **“Initiate the Transaction”**. Confirm the "
"transaction in Metamask and wait for the confirmation (a notification "
"will pop up shortly)."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:489
msgid ""
"The Beacon Chain (which is connected to the Execution Layer client) will "
"detect this deposit and the Validator will be enabled."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:492
msgid ""
"12. Go back to your chosen validator client, import the keys located in "
"the ``validator_keys`` directory and start the service (check the "
"specific client documentation above for further instructions)."
msgstr ""

#: ../../user-guide/running-l1-clients.rst:495
msgid "Congrats!, you just started your validator activation process."
msgstr ""

#: ../../user-guide/running-l2-clients.rst:2
msgid "Running Layer 2 nodes"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:4
msgid "You can choose several Layer 2 solutions to run an Ethereum L2 node:"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:18
msgid ""
"As explained in the Node Types section there are various L2 technologies "
"to scale the Ethereum blockchain and lower the transaction fees."
msgstr ""

#: ../../user-guide/running-l2-clients.rst:21
msgid ""
"It is important to keep both L1 and L2 nodes as decentralized as possible"
" and that basically means run nodes."
msgstr ""

#: ../../user-guide/running-l2-clients.rst:25
msgid ""
"If you have an Ethereum on ARM image installed prior to June 2023 you "
"need to install the clients manually. Otherwise you can skip this step:"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:35
msgid "Polygon"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:37
msgid ""
"Polygon is a L2 scaling solution for the Ethereum blockchain that "
"provides faster and more cost-effective transactions by using a "
"combination of sidechains and a proof-of-stake consensus mechanism."
msgstr ""

#: ../../user-guide/running-l2-clients.rst:41
msgid "Polygon requires a 4 TB disk to work properly."
msgstr ""

#: ../../user-guide/running-l2-clients.rst:43
msgid ""
"We will sync Polygon using Snapshots for both clients. Take into account "
"that the :guilabel:`Bor` snapshot is huge so it will take more than 10 "
"hours to download and 5 hours to decompress (:guilabel:`Heimdall` is "
"smaller but it will take a significant amount of time as well)"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:47
msgid "In order to run a Polygon node you need to:"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:49
msgid "Download :guilabel:`Bor` Snapshot"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:50
#: ../../user-guide/running-l2-clients.rst:52
#: ../../user-guide/running-l2-clients.rst:219
msgid "Decompress and remove the snapshot"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:51
msgid "Download :guilabel:`Heimdall` Snapshot"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:53
msgid "Start and sync the :guilabel:`Heimdall` client"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:54
msgid "Start and sync the :guilabel:`Bor` client"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:57
#: ../../user-guide/running-l2-clients.rst:226
msgid "Snapshots"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:59
msgid ""
"We included 2 scripts that download and decompress the Polygon Snapshots "
"automatically (for both :guilabel:`Heimdall` and :guilabel:`Bor` "
"clients). The recommended steps are as follows:"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:62
#: ../../user-guide/running-l2-clients.rst:230
msgid ""
"Run the ``screen`` utility in order to make sure the process continues to"
" run even if you are disconnected from the console (this is particularly "
"useful if you are accessing through SSH):"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:70
#: ../../user-guide/running-l2-clients.rst:238
msgid ""
"Press ``CONTROL+A  D`` to deattach the console and run the command "
"``screen -r`` to attach the console again"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:72
#: ../../user-guide/running-l2-clients.rst:240
msgid "Once inside screen, run the download script as the ``ethereum`` user:"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:78
msgid ""
"This will download the :guilabel:`Bor` snapshot. Once downloaded, it will"
" be decompressed into the correct directory and removed from disk."
msgstr ""

#: ../../user-guide/running-l2-clients.rst:81
msgid "Run the :guilabel:`Heimdall` snapshot script:"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:87
msgid ""
"This will download the :guilabel:`Heimdall` snapshot. Once downloaded it "
"will be decompressed into the correct directory and removed from disk."
msgstr ""

#: ../../user-guide/running-l2-clients.rst:91
#: ../../user-guide/running-l2-clients.rst:250
msgid "Clients"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:93
msgid "Start the :guilabel:`Heimdall` service and check the logs:"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:101
msgid ""
"The order is importante. Please run :guilabel:`Heimdall` first, wait for "
"it to get in sync and start :guilabel:`Bor` afterwards."
msgstr ""

#: ../../user-guide/running-l2-clients.rst:104
msgid "Once synced start the :guilabel:`Bor` service and, again, check the logs"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:111
msgid "Congrats, you are running a Polygon node."
msgstr ""

#: ../../user-guide/running-l2-clients.rst:114
msgid "Arbitrum"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:116
msgid ""
"**Arbitrum** uses a technology called Optimistic Rollups to bundle "
"multiple transactions into a single proof that is submitted to the "
"Ethereum mainnet (Layer 1). By moving much of the transaction processing "
"and computation off-chain, Arbitrum reduces congestion and gas fees on "
"the Ethereum network, while maintaining a high level of security and "
"decentralization."
msgstr ""

#: ../../user-guide/running-l2-clients.rst:121
msgid "The Arbitrum :guilabel:`Nitro` client is available."
msgstr ""

#: ../../user-guide/running-l2-clients.rst:124
msgid "You need a L1 node to connect to in order to run an Arbitrum node."
msgstr ""

#: ../../user-guide/running-l2-clients.rst:126
msgid "First step is to set the IP for your L1 Ethereum node:"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:132
#: ../../user-guide/running-l2-clients.rst:258
msgid "For example:"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:138
msgid ""
"We need to download and decompress the initial snapshot in order to "
"initialize the database. Run:"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:144
msgid ""
"Once finished, start the :guilabel:`Nitro` client service and wait for "
"the client to get in sync:"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:151
msgid "The Arbitrum node is up and running."
msgstr ""

#: ../../user-guide/running-l2-clients.rst:154
msgid "Starknet"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:156
msgid ""
"StarkNet is a Layer 2 scaling solution for the Ethereum blockchain, "
"designed to improve scalability, transaction throughput, and efficiency "
"using a technology called Zero-Knowledge (ZK) Rollups. This approach "
"allows StarkNet to bundle multiple transactions together, process them "
"off-chain, and then submit a proof of their validity to the Ethereum "
"mainnet (Layer 1)."
msgstr ""

#: ../../user-guide/running-l2-clients.rst:161
msgid ""
"There are 2 available clients for the Starknet Network: :guilabel:`Juno` "
"and :guilabel:`Papyrus`. :guilabel:`Papyrus` is currently on Alpha so we "
"will run :guilabel:`Juno`"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:164
msgid "You can start the client just by running the systemd service:"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:172
msgid "Gnosis"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:174
msgid ""
"Gnosis Chain, formerly xDai, is an Ethereum-compatible sidechain that "
"serves as a Layer 2 scaling solution and provides a more efficient "
"environment for Gnosis applications and other Ethereum-based projects."
msgstr ""

#: ../../user-guide/running-l2-clients.rst:178
msgid ""
":guilabel:`Gnosis` is already implemented in wome Layer 1 clients so we "
"can use the same client binaries but with different configurations."
msgstr ""

#: ../../user-guide/running-l2-clients.rst:181
msgid ""
"Like the Layer 1 clients you need to run a Consensus Layer node and an "
"Execution Layer client. Layer 1 clients guilabel:`Nethermind` and "
"guilabel:`Lighthouse` are already configured to run a Gnosis chain so we "
"just need to start the Systemd services:"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:190
msgid "And"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:197
msgid "Remember to forward the default ports: `9000` and `30303`"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:200
msgid "Optimism"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:202
msgid ""
"Optimism is a Layer 2 scaling solution for Ethereum that increases the "
"network's scalability by leveraging a technology called Optimistic "
"Rollups."
msgstr ""

#: ../../user-guide/running-l2-clients.rst:205
msgid ""
"Optimism aims to address Ethereum's high gas costs and slow transaction "
"speeds by moving most transactions off the Ethereum mainnet while still "
"maintaining a high level of security."
msgstr ""

#: ../../user-guide/running-l2-clients.rst:210
msgid ""
"1. We will sync Optimism using an :guilabel:`Op-Geth` Snapshot. Take into"
" account that this is a large snapshot and it will take a few hours to "
"download and decompress so, please, be patient. You will need a 1TB SSD "
"to be able to download the snapshot and extract it."
msgstr ""

#: ../../user-guide/running-l2-clients.rst:214
msgid "You need access to a synced Ethereum L1 node."
msgstr ""

#: ../../user-guide/running-l2-clients.rst:216
msgid "In order to run an Optimism node you need to:"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:218
msgid "Download :guilabel:`Op-Geth` Snapshot"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:220
msgid "Set the L1 node IP"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:221
msgid "Start and sync the :guilabel:`Op-Geth` client"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:222
msgid "Start and sync the :guilabel:`Op-Node` client"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:223
msgid "(Optional) Start the :guilabel:`L2Geth` client (not available yet)"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:228
msgid ""
"We included 1 script that download and decompress the :guilabel:`Op-Geth`"
" Snapshot automatically. The recommended steps are as follows:"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:246
msgid ""
"This will download the :guilabel:`Op-Geth` snapshot. Once downloaded it "
"will be decompressed into the correct directory."
msgstr ""

#: ../../user-guide/running-l2-clients.rst:252
msgid "Set the synced IP L1 ethereum node:"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:264
msgid "Start the :guilabel:`Op-Geth` service and check the logs:"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:272
msgid "The order is important. Please run :guilabel:`Op-Geth` first."
msgstr ""

#: ../../user-guide/running-l2-clients.rst:274
msgid "Now, start the :guilabel:`Op-Node` client:"
msgstr ""

#: ../../user-guide/running-l2-clients.rst:281
msgid "Congrats, you are now running an Optimism Bedrock node."
msgstr ""

#: ../../user-guide/running-web3-stack.rst:2
msgid "Running web3 stack"
msgstr ""

#: ../../user-guide/running-web3-stack.rst:4
msgid ""
"The Web3 refers to the set of technologies, protocols, and tools designed"
" to build decentralized applications (dApps) and create a more "
"**decentralized, user-centric internet.**"
msgstr ""

#: ../../user-guide/running-web3-stack.rst:8
msgid ""
"The Web3 stack is often associated with blockchain, but it includes other"
" peer-to-peer (P2P) technologies and protocols as well such us **IPFS, "
"Swarm, and Status.**"
msgstr ""

#: ../../user-guide/running-web3-stack.rst:11
msgid ""
"Ethereum on ARM includes all clients needed to run IPFS, Swarm and Status"
" nodes."
msgstr ""

#: ../../user-guide/running-web3-stack.rst:14
msgid ""
"If you have an Ethereum on ARM image installed prior to May 2023 you need"
" to install the clients manually. Otherwise you can skip this step:"
msgstr ""

#: ../../user-guide/running-web3-stack.rst:23
msgid "IPFS"
msgstr ""

#: ../../user-guide/running-web3-stack.rst:25
msgid ""
"IPFS (InterPlanetary File System) is a **distributed, peer-to-peer file "
"storage and sharing system** designed to replace the traditional, "
"centralized model of the internet. IPFS uses content-addressed storage, "
"which means that files are stored and retrieved based on their "
"cryptographic hash rather than their location on a specific server."
msgstr ""

#: ../../user-guide/running-web3-stack.rst:30
msgid ""
"This approach enables efficient and resilient file distribution, as "
"multiple nodes can store and serve the same content, making it less prone"
" to censorship and single points of failure. IPFS is an essential part of"
" the Web3 stack as it provides a decentralized way to store and access "
"data, complementing blockchain-based dApps."
msgstr ""

#: ../../user-guide/running-web3-stack.rst:35
msgid ""
"The IPFS go implementation is called :guilabel:`Kubo`. In order to run an"
" IPFS node you just need to start the Systemd Service"
msgstr ""

#: ../../user-guide/running-web3-stack.rst:45
msgid "Swarm"
msgstr ""

#: ../../user-guide/running-web3-stack.rst:47
msgid ""
"Swarm is a **decentralized storage system** primarily associated with the"
" Ethereum ecosystem. Similar to IPFS, Swarm is a peer-to-peer network "
"that allows users to store and share data in a distributed manner. "
"Swarm's focus is on providing scalable and efficient data storage for "
"dApps built on Ethereum. Swarm's integration with Ethereum makes it an "
"important part of the Web3 stack, particularly for Ethereum-based dApps."
msgstr ""

#: ../../user-guide/running-web3-stack.rst:53
msgid ""
"The Swarm implementation is :guilabel:`Bee`. In order to run a node you "
"just need to start the Systemd Service:"
msgstr ""

#: ../../user-guide/running-web3-stack.rst:61
msgid "Status"
msgstr ""

#: ../../user-guide/running-web3-stack.rst:63
msgid ""
"Status is a **decentralized messaging platform, wallet, and dApp browser "
"built on top of the Ethereum blockchain**. It aims to provide users with "
"a unified interface to interact with the decentralized web (Web3) by "
"enabling secure messaging, asset management, and access to various dApps."
" Status uses the Whisper protocol, a decentralized messaging system that "
"is part of the Ethereum stack, to facilitate secure and private "
"communication between users."
msgstr ""

#: ../../user-guide/running-web3-stack.rst:69
msgid ""
"By integrating with Ethereum and providing a user-friendly interface for "
"interacting with the decentralized web, Status serves as an essential "
"tool in the Web3 stack."
msgstr ""

#: ../../user-guide/running-web3-stack.rst:72
msgid ""
"The Status implementation is called :guilabel:`Status Go`. In order to "
"run an Status node you just need to start the Systemd Service:"
msgstr ""

#: ../../user-guide/security.rst:5
msgid "Node Security"
msgstr ""

#: ../../user-guide/security.rst:8
msgid "User account"
msgstr ""

#: ../../user-guide/security.rst:10
msgid ""
"In order to run the Ethereum software the image deletes the default "
"ubuntu user account, enables ssh access, and creates a system user called"
" ``ethereum``, all these steps are done by our installation script. Also,"
" on first ethereum user login, it asks the user to set a new safe "
"password."
msgstr ""

#: ../../user-guide/security.rst:14
msgid "You can access the device using a keyboard / monitor or through SSH."
msgstr ""

#: ../../user-guide/security.rst:17
msgid "UFW"
msgstr ""

#: ../../user-guide/security.rst:19
msgid ""
"We included the UFW firewall with a set of policies according to the "
"Ethereum software installed."
msgstr ""

#: ../../user-guide/security.rst:21
msgid ""
"It is disabled by default (as usually we run the devices behind a router)"
" but you can enable it by running:"
msgstr ""

#: ../../user-guide/storage.rst:5
msgid "Storage"
msgstr ""

#: ../../user-guide/storage.rst:7
msgid ""
"**You need at least 2 TB SSD** in order to run a Full Ethereum node. "
"Again, there is no chance of syncing the blockchain with an HDD disk."
msgstr ""

#: ../../user-guide/storage.rst:11
msgid "NanoPC T4, Rock 5B and Orange Pi 5 plus"
msgstr ""

#: ../../user-guide/storage.rst:13
msgid "These boards includes 4x M.2 2280 NVMe disk support."
msgstr ""

#: ../../user-guide/storage.rst:16
msgid "Orange Pi 5"
msgstr ""

#: ../../user-guide/storage.rst:18
msgid "This board includes 1x M.2 2245 NVMe disk support."
msgstr ""

#: ../../user-guide/storage.rst:21
msgid "Raspberry Pi 4"
msgstr ""

#: ../../user-guide/storage.rst:23
msgid ""
"You will need an SSD to run an Ethereum node (without an SSD drive "
"there's absolutely no chance of syncing the Ethereum blockchain). There "
"are 2 options:"
msgstr ""

#: ../../user-guide/storage.rst:27
msgid "Use an USB portable SSD disk such as the Samsung Portable T5 SSDs."
msgstr ""

#: ../../user-guide/storage.rst:28
msgid ""
"Use an USB 3.0 External Hard Drive Case with a SSD Disk. In our case we "
"used a **Startech SATA to USB Cable**. Make sure to buy a case with an "
"UASP (USB Attached SCSI) compliant chip, particularly, one of these:"
msgstr ""

#: ../../user-guide/storage.rst:32
msgid "JMicron JMS567"
msgstr ""

#: ../../user-guide/storage.rst:33
msgid "JMicron JMS578"
msgstr ""

#: ../../user-guide/storage.rst:34
msgid "ASMedia (ASM1153E)."
msgstr ""

#: ../../user-guide/storage.rst:37
msgid ""
"We strongly recommend **Startech SATA to USB Cable** if you are using a "
"UASP bridge:"
msgstr ""

#: ../../user-guide/storage.rst:41
msgid ""
"In all cases, avoid getting low quality SSD disks as it is a key "
"component of your node and it can drastically affect the node performance"
" (and sync times). Keep in mind that you need to plug the disk to an USB "
"3.0 port (in blue)."
msgstr ""

#: ../../user-guide/storage.rst:46
msgid ""
"Remember that the Raspberry Pi 4 can barely run a node after The Merge. "
"Choose a board from the above list if possible."
msgstr ""

#: ../../user-guide/troubleshooting.rst:5
msgid "Troubleshooting"
msgstr ""

#: ../../user-guide/troubleshooting.rst:7
msgid ""
"If you run into some issue with the image installation or running the "
"Ethereum on ARM node, please **follow these steps** in order to solve the"
" issue or get assistance."
msgstr ""

#: ../../user-guide/troubleshooting.rst:12
msgid "EOA Check script"
msgstr ""

#: ../../user-guide/troubleshooting.rst:14
msgid ""
"This script is designed to check for common issues that users may "
"encounter when trying to install and run their first Ethereum on ARM "
"node. It checks for various system information such as hardware, "
"software, and service status and looks for the usual problems that users "
"may face based on the shared experiences in the Discord community."
msgstr ""

#: ../../user-guide/troubleshooting.rst:19
msgid ""
"The script's purpose is to help users troubleshooting info and identify "
"any potential issues that may be preventing the Ethereum on ARM node from"
" running properly."
msgstr ""

#: ../../user-guide/troubleshooting.rst:22
msgid ""
"We will include it by default in the next images release. From now, you "
"can install it by typing:"
msgstr ""

#: ../../user-guide/troubleshooting.rst:28
msgid ""
"Usage is quite simple. Type the following command in order to run all "
"checks locally:"
msgstr ""

#: ../../user-guide/troubleshooting.rst:34
msgid ""
"If you don't know what the report means or you have questions about it, "
"you can send the log to a paste service in order to make it publicly "
"available. Run:"
msgstr ""

#: ../../user-guide/troubleshooting.rst:41
msgid ""
"The command will return an URL which you can use to show others the "
"report content."
msgstr ""

#: ../../user-guide/troubleshooting.rst:44
msgid "Discord Channel"
msgstr ""

#: ../../user-guide/troubleshooting.rst:46
msgid ""
"You can ask for help in our **Discord** channel. Paste the ``eoa_send`` "
"content here if, as stated above, you don't know what the ``eoa_check`` "
"output means. This is our channel:"
msgstr ""

#: ../../user-guide/troubleshooting.rst:49
msgid "`EOA Discord channel`_"
msgstr ""

#: ../../user-guide/using-your-node.rst:5
msgid "Using your node"
msgstr ""

#: ../../user-guide/using-your-node.rst:7
msgid ""
"Besides contributing to the network decentralization, you can use your "
"node for sending transactions or to query the Ethereum API."
msgstr ""

#: ../../user-guide/using-your-node.rst:10
msgid ""
"Our image includes an **Nginx proxy** that connects to the **Execution "
"Layer RPC** and make the node communication easier."
msgstr ""

#: ../../user-guide/using-your-node.rst:12
msgid ""
"The Nginx proxy is included in the last images. If you are running an old"
" one make sure it is installed by typing:"
msgstr ""

#: ../../user-guide/using-your-node.rst:23
msgid "SSL config"
msgstr ""

#: ../../user-guide/using-your-node.rst:25
msgid ""
"An SSL preconfiguration is included in the ``/etc/nginx/sites-available"
"/ethereum-ssl.conf`` file as well. It is intended to be used with your "
"own certificate or Let's Encrypt. Use this only if you know what you are "
"doing."
msgstr ""

#: ../../user-guide/using-your-node.rst:30
msgid "Sending transactions"
msgstr ""

#: ../../user-guide/using-your-node.rst:32
msgid ""
"You can use your favourite wallet to send transactions to the network. "
"For instance, let's see how to connect **Metamask** to your node."
msgstr ""

#: ../../user-guide/using-your-node.rst:35
msgid ""
"Open the extension in your browser and click in the top network menu "
"(probably showing \"Ethereum Mainnet\")."
msgstr ""

#: ../../user-guide/using-your-node.rst:37
msgid "Click **\"Add Network\"** button."
msgstr ""

#: ../../user-guide/using-your-node.rst:43
msgid "Click **\"Add a network manually\"** at the page bottom."
msgstr ""

#: ../../user-guide/using-your-node.rst:49
msgid "Fill in with your node data."
msgstr ""

#: ../../user-guide/using-your-node.rst:55
msgid "For instance. This is a configured local node:"
msgstr ""

#: ../../user-guide/using-your-node.rst:62
msgid "Querying the blockchain"
msgstr ""

#: ../../user-guide/using-your-node.rst:64
msgid ""
"You can query the API using several methods. This is an example of how to"
" get the last block using ``curl`` (from your desktop terminal):"
msgstr ""

#: ../../user-guide/using-your-node.rst:67
msgid "Replace ``$YOUR_NODE_IP`` for your node IP address."
msgstr ""

